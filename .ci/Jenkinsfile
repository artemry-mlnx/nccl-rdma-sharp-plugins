#!/usr/bin/env groovy

def arch_distro_list = [
    "x86_64:ubuntu18.04",
]

def tasks_build = [:]

env.DOCKER_REGISTRY                 = "harbor.mellanox.com"
env.DOCKER_REGISTRY_URL             = "https://${DOCKER_REGISTRY}"
env.DOCKER_REGISTRY_REPO            = "rivermax"
env.DOCKER_REGISTRY_CREDENTIALS_ID  = "65eb3652-9da0-4f39-8a4c-f61972fb65a1" // rivermax user

// TODO move outside
env.NFS_WORKSPACE_ROOT = "/.autodirect/mtrswgwork/_ml_devops_team/workspace"
env.NFS_WORKSPACE = "${NFS_WORKSPACE_ROOT}/nccl-plugins-pr/${BUILD_NUMBER}"
env.ARTEFACT_DIR = "${NFS_WORKSPACE}/artefacts"

// Building
arch_distro_list.each {
    def arch = it.split(":")[0]
    def distro = it.split(":")[1]
    def nodeSelector = ""
    switch (arch) {
        case "x86_64":
            nodeSelector = "kubernetes.io/arch=amd64"
            break
        case "aarch64":
            nodeSelector = "kubernetes.io/arch=arm64"
            break
        case "ppc64le":
            nodeSelector = "kubernetes.io/arch=ppc64le"
            break
    }
    tasks_build["${arch}:${distro}"] = {
        def container_name="${arch}-${distro}-${BUILD_ID}".replaceAll("[\\.:/_]","")
        echo "INFO: container_name = ${container_name}"
        podTemplate(
            cloud: "swx-k8s-spray",
            runAsUser: "0",
            runAsGroup: "0",
            nodeSelector: nodeSelector,
            containers: [
                containerTemplate(
                    name: "${container_name}",
                    image: "${DOCKER_REGISTRY}/${DOCKER_REGISTRY_REPO}/${arch}/${distro}/mofed-${MLNX_OFED_VERSION}:base",
                    command: "sleep infinity",
                    alwaysPullImage: "true",
                )
            ],
            volumes: [
                hostPathVolume(hostPath: "/hpc/local", mountPath: "/hpc/local"),
                hostPathVolume(hostPath: "/.autodirect/mtrswgwork", mountPath: "/.autodirect/mtrswgwork"),
            ]
        ) {
            node(POD_LABEL) {
                stage ("Build on ${distro} (${arch})") {
                    container("${container_name}") {
                        sh "hostname"
                        sh "cat /proc/1/cgroup"
                        sh "cat /etc/*release*"
                        sh "ofed_info -s"
                        unstash "${env.JOB_NAME}"
                        sh "tar xfz nccl-rdma-sharp-plugins.tgz"
                        echo 'Building nccl-rdma-sharp-plugins...'
                        sh """#!/bin/bash
                            set -o pipefail
                            WORKSPACE=${WORKSPACE}/nccl-rdma-sharp-plugins ${WORKSPACE}/nccl-rdma-sharp-plugins/.ci/build_nccl_rdma_sharp_plugins.sh 2>&1 | tee ${ARTEFACT_DIR}/build_nccl_rdma_sharp_plugins_${arch}_${distro}.log
                            """
                    }
                }
            }
        }
    }
}

node("master") {
    stage("Preliminary steps") {
        sh 'mkdir -p ${NFS_WORKSPACE}'
    }
    stage("Prepare checkout") {
        cleanWs()
        dir('nccl-rdma-sharp-plugins') {
            checkout([
                $class: 'GitSCM',
                branches: [[name: "${sha1}"]],
                doGenerateSubmoduleConfigurations: false,
                extensions: [
                    [$class: "WipeWorkspace"],
                ],
                submoduleCfg: [],
                userRemoteConfigs: [[
                    credentialsId: "549927eb-7f38-4a8f-997a-81dd63605782",
                    name: "origin",
                    refspec: "+refs/heads/*:refs/remotes/origin/* +refs/pull/*:refs/remotes/origin/pr/*",
                    url: "https://github.com/artemry-mlnx/nccl-rdma-sharp-plugins"
                ]]
             ])
        }
        // create git tarball on server, agents will copy it and unpack
        sh "tar cfz nccl-rdma-sharp-plugins.tgz nccl-rdma-sharp-plugins"
        stash includes: "nccl-rdma-sharp-plugins.tgz", name: "${env.JOB_NAME}"
    }
}

timestamps {
    parallel tasks_build
}
