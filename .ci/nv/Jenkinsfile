podTemplate (
    cloud:'sc-ipp-blossom-prod',
    volumes: [persistentVolumeClaim(mountPath: '/sw-mellanox-storage', claimName: 'sw-mellanox-storage', readOnly: false)],
    //containers: [containerTemplate(name: 'ubuntu1804', image: 'nvidia/cuda:10.2-devel-ubuntu18.04', ttyEnabled: true, command: 'cat')]
    yaml: '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:19.03.1
    command:
    - sleep
    args:
    - 99d
    env:
      - name: DOCKER_HOST
        value: tcp://localhost:2375
  - name: docker-daemon
    image: docker:19.03.1-dind
    securityContext:
      privileged: true
    env:
      - name: DOCKER_TLS_CERTDIR
        value: ""
'''
) {
    environment {
        DOCKER_REGISTRY_SERVER      = "gitlab-master.nvidia.com:5005"
        DOCKER_REGISTRY_NAME        = "artemry/tester"
        ARTEFACT_DIR                = "${WORKSPACE}/artefacts"
        NFS_WORKSPACE               = "${NFS_WORKSPACE_ROOT}/ml-nccl-rdma-sharp-plugins-pr/${BUILD_NUMBER}"
        NCCL_RDMA_SHARP_PLUGINS_DIR = "${NFS_WORKSPACE}/nccl-rdma-sharp-plugins"
        NCCL_TESTS_DIR              = "${NFS_WORKSPACE}/nccl-tests"
    }

    node(POD_LABEL) {
        stage('Build base docker image') {
            container('docker') {
                withCredentials([usernamePassword(credentialsId: 'blossom-validation-git', passwordVariable: 'Password', usernameVariable: 'Username')]) {
                    sh "docker --version"
                    sh "docker ps"
                    //By default, docker pulls images from Docker Hub.
                    sh "docker pull ubuntu:latest"

                    sh "docker login ${docker_registry_server} --username ${Username} --password ${Password}"
                    // add extra build steps here if required
                    // push to custom docker registry

                    sh "docker tag ubuntu:latest ${docker_registry_server}/${docker_registry_name}/myubuntu:latest"
                    sh "docker push ${docker_registry_server}/${docker_registry_name}/myubuntu:latest"
                    sh "docker logout ${docker_registry_server}"

                    // remove images
                    sh "docker rmi ${docker_registry_server}/${docker_registry_name}/myubuntu:latest"
                    sh "docker rmi ubuntu:latest"
                }
            }
        }
        stage('Build nccl-rdma-sharp-plugins') {
            //container('ubuntu1804') {
            container('docker') {
                checkout scm
                echo 'Building nccl-rdma-sharp-plugins...'
                sh "cat /etc/*release*"
                sh "printenv"
                sh "ls -al /"
                sh "mkdir -p /sw-mellanox-storage/tmp"
                sh "ls -al /sw-mellanox-storage"
                sh "id"
                sh "pwd"
                sh "find ."
                echo "INFO: WORKSPACE = ${WORKSPACE}"
                sh "find ${WORKSPACE}"
                sh """#!/bin/bash
                    set -o pipefail
                    ${WORKSPACE}/.ci/build_nccl_rdma_sharp_plugins.sh 2>&1
                    """
            }
        }
    }
}
